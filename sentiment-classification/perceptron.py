import numpy as npfrom matplotlib.mlab import frangefrom matplotlib import pyplot as pltdef f(x,w,b):    return sigmoid(x @ w + b)def sigmoid(t):    return 1.0 / (1 + np.exp(-t))def l2loss(x,y,w,b):    y_hat = f(x, w, b)    r = y - y_hat    loss_l2 = r.T @ r    w_grad = (y - y_hat) * (y_hat * (1-y_hat))    b_grad = (y - y_hat) * (y_hat * (1-y_hat))    return (loss_l2, w_grad, b_grad)def minimize_l2loss(x,y,w,b, num_iters=1000, eta=0.001):    w = w.reshape((-1, 1))    y = y.reshape((-1, 1))    for i in range(num_iters):        print("Num iter: ", i)        l, w_grad, b_grad = l2loss(x, y, w, b)        w = w + eta * x.T @ w_grad        b = b + eta * np.sum(b_grad)    return w, bdef roc_curve(test_labels, f_result):    tp = []    fp = []    for T in frange(0, 1, 0.001):        yhat = f_result > T        yhat = yhat.reshape((-1))        tot_pos = np.sum(test_labels == 1)        true_pos = np.sum(np.logical_and(yhat == 1, test_labels == 1)) / tot_pos        false_pos = np.sum(np.logical_and(yhat == 1, test_labels == 0)) / tot_pos        tp.append(true_pos)        fp.append(false_pos)    plt.figure()    lw = 1    plt.plot(fp, tp, color='darkorange',             lw=lw, label='ROC curve')    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')    plt.xlim([-0.05, 1.0])    plt.ylim([0.0, 1.05])    plt.xlabel('False Positive Rate')    plt.ylabel('True Positive Rate')    plt.title('ROC Curve')    plt.legend(loc="lower right")    plt.show()def precision_recall_curve(test_labels, f_result):    p = []    r = []    for T in frange(0, 1, 0.001):        yhat = f_result > T        yhat = yhat.reshape((-1))        true_pos = np.sum(np.logical_and(yhat == 1, test_labels == 1))        false_pos = np.sum(np.logical_and(yhat == 1, test_labels == 0))        true_neg = np.sum(np.logical_and(yhat == 0, test_labels == 0))        false_neg = np.sum(np.logical_and(yhat == 0, test_labels == 1))        p.append(true_pos / (true_pos + false_pos))        r.append(true_pos / (true_pos + false_neg))    plt.figure()    lw = 1    plt.plot(r, p, color='darkorange',             lw=lw, label='Precision-Recall Curve')  #  plt.plot([0, 1], [0, 1], color='blue', lw=lw, linestyle='--')    plt.xlim([-0.05, 1.05])    plt.ylim([0.0, 1.05])    plt.xlabel('Recall')    plt.ylabel('Precision')    plt.title('Precision-Recall Curve')    plt.legend(loc="lower right")    plt.show()